import json
import re
import os
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv


load_dotenv()

try:
    with open("itmo_programs.json", "r", encoding="utf-8") as f:
        PROGRAM_DATA = json.load(f)
    print("Successfully loaded program data.")
except FileNotFoundError:
    print(
        "Error: 'itmo_programs.json' not found. Please run the scraping script first."
    )
    exit()

BOT_TOKEN = os.getenv("BOT_TOKEN")


def get_program_key(text: str) -> str | None:
    text_lower = text.lower()
    if "product" in text_lower or "–ø—Ä–æ–¥—É–∫—Ç" in text_lower or "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" in text_lower:
        return "ai_product"
    if (
        "ai" in text_lower
        or "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in text_lower
        or "–∏–Ω–∂–µ–Ω–µ—Ä" in text_lower
    ):
        return "ai"
    return None


def get_semester(text: str) -> int | None:
    match = re.search(r"\b(\d+)\b", text)
    return int(match.group(1)) if match else None


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û.\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' (AI) –∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏' (AI Product).\n\n"
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
        "‚úÖ '–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –µ—Å—Ç—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ AI –≤ 1 —Å–µ–º–µ—Å—Ç—Ä–µ?'\n"
        "‚úÖ '–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏?'\n"
        "‚úÖ '–ü–æ—Å–æ–≤–µ—Ç—É–π –∫—É—Ä—Å—ã, –µ—Å–ª–∏ –º–æ–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –Ω–µ–º–Ω–æ–≥–æ python.'\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
    )
    await update.message.reply_text(welcome_text)


def handle_list_courses(text: str) -> str:
    program_key = get_program_key(text)
    if not program_key:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 'AI' –∏–ª–∏ 'AI Product'?"

    program_info = PROGRAM_DATA.get(program_key, {})
    program_name = program_info.get("program_name", program_key)
    courses = program_info.get("courses", [])

    semester = get_semester(text)

    if semester is None:
        return f"–ù–µ –Ω–∞—à–µ–ª –∫—É—Ä—Å–æ–≤ –¥–ª—è {semester}-–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ '{program_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ–º–µ—Å—Ç—Ä."

    if semester:
        # Filter courses by the specified semester
        filtered_courses = [
            c for c in courses if str(semester) in c["semester"].split(", ")
        ]
        if not filtered_courses:
            return f"–ù–µ –Ω–∞—à–µ–ª –∫—É—Ä—Å–æ–≤ –¥–ª—è {semester}-–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ '{program_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ–º–µ—Å—Ç—Ä."

        response_lines = [
            f"üìö –ö—É—Ä—Å—ã –¥–ª—è {semester}-–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program_name}':\n"
        ]
        for course in filtered_courses:
            response_lines.append(f"- {course['name']} (*{course['credits']} –∑.–µ.*)")
        return "\n".join(response_lines)
    else:
        # List all courses if no semester is specified
        if not courses:
            return (
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program_name}'."
            )

        response_lines = [f"üìö –í—Å–µ –∫—É—Ä—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program_name}':\n"]
        for course in courses:
            response_lines.append(f"- (–°–µ–º–µ—Å—Ç—Ä {course['semester']}) {course['name']}")
        return "\n".join(response_lines)


def handle_recommendations(text: str) -> str:
    background_keywords = {
        "management": [
            "—É–ø—Ä–∞–≤–ª–µ–Ω",
            "–º–µ–Ω–µ–¥–∂–µ—Ä",
            "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
            "–ø—Ä–æ–¥—É–∫—Ç",
            "product",
            "–±–∏–∑–Ω–µ—Å",
        ],
        "development": [
            "python",
            "c++",
            "web",
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
            "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "backend",
            "back-end",
            "frontend",
            "front-end",
            "full-stack",
            "fullstack",
            "full stack",
            "–∏–Ω–∂–µ–Ω–µ—Ä",
            "developer",
            "engineer",
            "js",
            "javascript",
        ],
        "data_science": [
            "data science",
            "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "mlops",
            "ml",
            "–º–æ",
        ],
        "design": ["–¥–∏–∑–∞–π–Ω", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "ui", "ux", "ux/ui"],
    }

    matched_skills = set()
    for skill, keywords in background_keywords.items():
        if any(keyword in text.lower() for keyword in keywords):
            matched_skills.add(skill)

    if not matched_skills:
        return "–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –±—ç–∫–≥—Ä–∞—É–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–µ–Ω–µ–¥–∂–µ—Ä', 'python', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'."

    recommendations = []
    all_courses = PROGRAM_DATA["ai"]["courses"] + PROGRAM_DATA["ai_product"]["courses"]

    for course in all_courses:
        score = 0
        course_lower = course["name"].lower()
        if "management" in matched_skills and any(
            kw in course_lower for kw in ["—É–ø—Ä–∞–≤–ª–µ–Ω", "–ø—Ä–æ–¥—É–∫—Ç", "–±–∏–∑–Ω–µ—Å", "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü"]
        ):
            score += 1
        if "development" in matched_skills and any(
            kw in course_lower
            for kw in ["python", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫", "–∏–Ω–∂–µ–Ω–µ—Ä", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω"]
        ):
            score += 1
        if "data_science" in matched_skills and any(
            kw in course_lower
            for kw in ["–¥–∞–Ω–Ω—ã", "–º–∞—à–∏–Ω", "–∞–Ω–∞–ª–∏–∑", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫", "–º–æ–¥–µ–ª–∏"]
        ):
            score += 1
        if "design" in matched_skills and any(
            kw in course_lower for kw in ["–¥–∏–∑–∞–π–Ω", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"]
        ):
            score += 1

        if score > 0:
            recommendations.append((score, course))

    # Sort by score (highest first) and remove duplicates
    recommendations.sort(key=lambda x: x[0], reverse=True)
    unique_recs = list({rec["name"]: rec for score, rec in recommendations}.values())

    if not unique_recs:
        return "–ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å."

    response_lines = [
        "‚úÖ –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ, –≤–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã:\n"
    ]
    for course in unique_recs[:5]:  # Show top 5
        prog_key = (
            "ai_product" if course in PROGRAM_DATA["ai_product"]["courses"] else "ai"
        )
        prog_name = PROGRAM_DATA[prog_key]["program_name"]
        response_lines.append(f"- {course['name']} (–∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã *{prog_name}*)")

    return "\n".join(response_lines)


def handle_comparison(text: str) -> str:
    return (
        "–ö–ª—é—á–µ–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏:\n\n"
        "üë®‚Äçüíª *–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (AI)* ‚Äî —ç—Ç–æ –≥–ª—É–±–æ–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö ML-–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. "
        "–§–æ–∫—É—Å –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö, –º–æ–¥–µ–ª—è—Ö, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ MLOps.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫—É—Ä—Å–æ–≤: `–í—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ GPU`, `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ MLOps`, `–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö`.\n\n"
        "üìà *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (AI Product)* ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º AI-—Ä–µ—à–µ–Ω–∏–π. "
        "–§–æ–∫—É—Å –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö, –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—è—Ö, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫—É—Ä—Å–æ–≤: `–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç`, `–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–æ–≤`, `–ú–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞`.\n\n"
        "–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É—á–∏—Ç *–∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å AI*, –∞ –≤—Ç–æ—Ä–∞—è ‚Äî *—á—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å*."
    )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    text_lower = text.lower()

    # Simple Intent Routing
    if any(k in text_lower for k in ["—Å—Ä–∞–≤–Ω–∏", "—Ä–∞–∑–Ω–∏—Ü", "–æ—Ç–ª–∏—á", "—á—Ç–æ –ª—É—á—à–µ"]):
        response = handle_comparison(text_lower)
    elif any(
        k in text_lower for k in ["—Ä–µ–∫–æ–º–µ–Ω–¥", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–±—ç–∫–≥—Ä–∞—É–Ω–¥", "background"]
    ):
        response = handle_recommendations(text_lower)
    elif "–∫—É—Ä—Å" in text_lower:
        response = handle_list_courses(text_lower)
    else:
        response = "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é."

    await update.message.reply_markdown(response)


def main():
    print("Starting bot...")
    app = Application.builder().token(BOT_TOKEN).build()

    # Register handlers
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # Start polling
    print("Bot is running. Press Ctrl+C to stop.")
    app.run_polling()


if __name__ == "__main__":
    main()
